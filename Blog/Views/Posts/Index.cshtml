@using System.Security.Claims
@model IEnumerable<Blog.Models.Posts>

@{
    ViewData["Title"] = "Latest Posts";
}

<script src="https://kit.fontawesome.com/0ba84eacf9.js" crossorigin="anonymous"></script>

<!-- Hero Section -->
<section class="hero">
    <div class="container">
        <h2 class="text-center">Latest Posts</h2>
        <p>Stay updated with the latest posts.</p>
    </div>
</section>

<!-- Search Section -->
<section class="search-section">
    <div class="container">
        <form asp-action="Index" method="get">
            <div class="input-group mb-3">
                <input type="text" name="searchString" class="form-control" placeholder="Search for articles..." value="@ViewData["CurrentFilter"]">
                <button class="btn btn-outline-secondary" type="submit"><i class="fas fa-search"></i></button>
            </div>
        </form>
    </div>
</section>

<!-- Navigation Section -->
<section class="navigation-section">
    <div class="container">
        <div class="row">
            <div class="col-md-3">
                <nav class="nav flex-column">
                    @foreach (var yearGroup in Model.GroupBy(p => p.CreatedAt.Year).OrderByDescending(g => g.Key))
                    {
                        <a class="nav-link" href="#">@yearGroup.Key</a>
                        @foreach (var monthGroup in yearGroup.GroupBy(p => p.CreatedAt.Month).OrderByDescending(g => g.Key))
                        {
                            <a class="nav-link ms-3" href="#">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(monthGroup.Key)</a>
                        }
                    }
                </nav>
            </div>
            <div class="col-md-9">
                <div class="row justify-content-center">
                    @foreach (var item in Model)
                    {
                        <div class="col-md-12 mb-4">
                            <div class="card shadow rounded">
                                <div class="card-body">
                                    <a asp-action="Details" asp-route-id="@item.Id">
                                        <img class="card-img-top img-fluid mb-3" src="@item.Image" alt="@item.Description" id="postImage-@item.Id">
                                    </a>
                                    <p class="card-text">@item.Description</p>
                                    <p class="card-text">by: @item.Email</p>
                                    <p class="card-text">@item.CreatedAt</p>

                                    <!-- Botão de Like/Dislike -->
                                    <form id="likeForm-@item.Id" asp-action="Like" asp-route-postId="@item.Id" method="post">
                                        <button id="likeButton-@item.Id" type="submit" class="btn btn-outline-primary">
                                            @if (User.Identity.IsAuthenticated)
                                            {
                                                // Verifica se o usuário já deu like no post
                                                var existingLike = item.Likes.FirstOrDefault(l => l.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier));
                                                if (existingLike != null && existingLike.PostId == item.Id)
                                                {
                                                    <i class="fas fa-thumbs-up"></i>
                                                }
                                                else
                                                {
                                                    <i class="far fa-thumbs-up"></i>
                                                                    }
                                            }
                                            else
                                            {
                                                <i class="far fa-thumbs-up"></i>
                                                                    }
                                        </button>
                                        <span id="likeCount-@item.Id">@item.LikeCount</span>
                                    </form>
                                </div>
                            </div>
                        </div>
                    }



                </div>
            </div>
        </div>
    </div>
</section>

<style>
    .hero {
        background-image: url('/bg01.jpg');
        padding: 180px 0;
        text-align: center;
        background-size: cover;
        background-position: center;
        color: #fff;
    }

    .search-section {
        padding: 20px 0;
    }

    .navigation-section {
        padding: 50px 0;
    }

    .card {
        transition: all 0.3s ease;
        border: none;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        }

    .nav-link {
        color: #007bff;
        text-decoration: none;
    }

        .nav-link:hover {
            text-decoration: underline;
        }

    .ms-3 {
        margin-left: 1rem;
    }

    .btn-like {
        padding: 0.5rem 1rem;
        font-size: 1rem;
        border-radius: 4px;
        transition: all 0.3s ease;
    }

        .btn-like:hover {
            background-color: #007bff;
            color: #fff;
        }

        .btn-like i {
            margin-right: 5px;
        }

        .btn-like.disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }
</style>
@section Scripts {
    <script>
        function handleLike(postId) {
            var likeButton = document.querySelector(`#likeButton-${postId}`);
            var likeCount = document.querySelector(`#likeCount-${postId}`);

            // Verifica se o botão está desativado para evitar múltiplos cliques
            if (likeButton.disabled) {
                return;
            }

            // Desativa o botão temporariamente para evitar múltiplos cliques
            likeButton.disabled = true;

            // Atualiza o texto do botão e contagem de likes após a resposta do servidor
            fetch(`/Posts/Like?postId=${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'RequestVerificationToken': '@Html.AntiForgeryToken()'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.liked) {
                        likeButton.innerHTML = '<i class="fas fa-thumbs-up"></i> Liked';
                    } else {
                        likeButton.innerHTML = '<i class="far fa-thumbs-up"></i> Like';
                    }
                    likeCount.innerText = data.likeCount;
                })
                .catch(error => {
                    console.error('Error:', error);
                })
                .finally(() => {
                    likeButton.disabled = false; // Reativa o botão após a resposta
                });
        }
    </script>
}

}
